// ЁЯУж р╕Щр╕│р╣Ар╕Вр╣Йр╕▓ dependencies р╕Чр╕╡р╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щ
const express = require("express"); // р╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕гр╣Йр╕▓р╕З Web Server
const mongoose = require("mongoose"); // р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н MongoDB
const bcrypt = require("bcryptjs"); // р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Вр╣Йр╕▓р╕гр╕лр╕▒р╕кр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ
const jwt = require("jsonwebtoken"); // р╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕ер╕░р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Token
const cors = require("cors"); // р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Ыр╕┤р╕Фр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ Cross-Origin Resource Sharing

const app = express(); // р╕кр╕гр╣Йр╕▓р╕З Express application
app.use(express.json()); // Middleware р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Ыр╕ер╕З request body р╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щ JSON
app.use(cors({ origin: "*", methods: "GET,POST,PUT,DELETE", allowedHeaders: "Content-Type,Authorization" })); // р╕нр╕Щр╕╕р╕Нр╕▓р╕Хр╣Гр╕лр╣Й frontend р╣Ар╕гр╕╡р╕вр╕Б API р╣Др╕Фр╣Йр╕Ир╕▓р╕Бр╕Чр╕╕р╕Б origin

// ЁЯФМ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н MongoDB
mongoose.connect("mongodb://127.0.0.1:27017/flutter_db", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
// ЁЯСд р╕кр╕гр╣Йр╕▓р╕З schema р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й (User)
const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, enum: ["company", "intern"], required: true },
});

const User = mongoose.model("User", UserSchema);

// ЁЯУМ р╕кр╕гр╣Йр╕▓р╕З schema р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Вр╕Юр╕кр╕Хр╣Мр╕Эр╕╢р╕Бр╕Зр╕▓р╕Щ (Post)
const PostSchema = new mongoose.Schema({
  position: { type: String, required: true },
  description: { type: String, required: true },
  skills: { type: [String], required: true },
  companyId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

const Post = mongoose.model("Post", PostSchema);

// ЁЯУи р╕кр╕гр╣Йр╕▓р╕З schema р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Гр╕Ър╕кр╕бр╕▒р╕Др╕гр╕Эр╕╢р╕Бр╕Зр╕▓р╕Щ (Application)
const ApplicationSchema = new mongoose.Schema({
  postId: { type: mongoose.Schema.Types.ObjectId, ref: "Post", required: true },
  internId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  resume: String,
  coverLetter: String,
  status: { type: String, enum: ["pending", "accepted", "rejected"], default: "pending" },
  appliedAt: { type: Date, default: Date.now },
});

const Application = mongoose.model("Application", ApplicationSchema);

// ЁЯФР Middleware р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ JWT token
const verifyToken = (req, res, next) => {
  const token = req.headers["authorization"];
  if (!token) return res.status(403).json({ msg: "No token provided" });

  jwt.verify(token.replace("Bearer ", ""), "SECRET_KEY", (err, decoded) => {
    if (err) return res.status(401).json({ msg: "Unauthorized" });
    req.userId = decoded.id; // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Б userId р╕ер╕Зр╣Гр╕Щ req
    req.role = decoded.role; // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Б role р╕ер╕Зр╣Гр╕Щ req
    next();  // р╣Др╕Ыр╕Хр╣Ир╕н
  });
};

// ЁЯУЭ API: р╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Б
app.post("/register", async (req, res) => {
  try {
    const { email, password, role } = req.body;
    const existingUser = await User.findOne({ email }); // р╣Др╕Ыр╕нр╣Ир╕▓р╕Щр╕нр╕╡р╣Ар╕бр╕ер╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
    if (existingUser) return res.status(400).json({ msg: "Email already exists" }); //р╕Цр╣Йр╕▓р╕бр╕╡р╣Ар╕бр╕ер╕Лр╣Йр╕│р╣Гр╕лр╣Йр╣Бр╕Ир╣Йр╕З

    const hashedPassword = await bcrypt.hash(password, 10);//р╣Ар╕нр╕▓р╕гр╕лр╕▒р╕кр╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Ыр╣Ар╕Вр╣Йр╕▓р╕гр╕лр╕▒р╕к
    const newUser = new User({ email, password: hashedPassword, role });//р╕кр╕гр╣Йр╕▓р╕Зuserр╣Гр╕лр╕бр╣И
    await newUser.save();

    res.status(201).json({ msg: "User registered successfully" });
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});
// ЁЯФС API: р╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ
app.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });//р╕лр╕▓р╕гр╕лр╕▒р╕кр╕Чр╕╡р╣Ир╕кр╕бр╕▒р╕Др╕гр╣Др╕зр╣Йр╣Вр╕Фр╕вр╣Гр╕Кр╣Йр╣Ар╕бр╕е
    if (!user) return res.status(400).json({ msg: "User not found" });

    const isMatch = await bcrypt.compare(password, user.password);//р╣Ар╕Чр╕╡р╕вр╕Ър╕гр╕лр╕▒р╕кр╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕бр╕▓р╕Бр╕▒р╕Ър╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕зр╣Ир╕▓р╕Хр╕гр╕Зр╕Бр╕▒р╕Щр╣Др╕лр╕б
    if (!isMatch) return res.status(400).json({ msg: "Invalid credentials" });

    const token = jwt.sign({ id: user._id, role: user.role }, "SECRET_KEY", { expiresIn: "1h" });

    res.json({ token, role: user.role, userId: user._id });
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});
// ЁЯУе API: р╕Фр╕╢р╕Зр╣Вр╕Юр╕кр╕Хр╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
app.get("/api/posts", async (req, res) => {
  try {
    const posts = await Post.find()
      .populate("companyId", "email")//р╣Ар╕нр╕▓р╣Ар╕бр╕ер╕бр╕▓р╕Фр╕╣р╕зр╣Ир╕▓р╣Гр╕Др╕гр╣Вр╕Юр╕к
      .exec();
    res.json(posts);
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});

// тЮХ API: р╕Ър╕гр╕┤р╕йр╕▒р╕Чр╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Юр╕кр╕Хр╣Мр╣Гр╕лр╕бр╣И
app.post("/api/posts", verifyToken, async (req, res) => {
  try {
    const { position, description, skills } = req.body;

    if (!position || !description || !skills) {
      return res.status(400).json({ msg: "All fields are required" });
    }

    const newPost = new Post({
      position,
      description,
      skills,
      companyId: req.userId,
    });

    await newPost.save();
    res.status(201).json({ msg: "Post created" });
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});

// тЬПя╕П API: р╣Бр╕Бр╣Йр╣Др╕Вр╣Вр╕Юр╕кр╕Хр╣М
app.put("/api/posts/:id", verifyToken, async (req, res) => {
  try {
    const post = await Post.findById(req.params.id);//р╣Ар╕Кр╣Зр╕Др╕зр╣Ир╕▓р╣Вр╕Юр╕кр╕Чр╕╡р╣Ир╣Бр╕Бр╣Йр╕бр╕╡р╕Ир╕гр╕┤р╕Зр╣Др╕лр╕б
    if (!post) return res.status(404).json({ msg: "Post not found" });

    if (post.companyId.toString() !== req.userId)//р╕Др╕Щр╕Чр╕╡р╣Ир╕Ир╕░р╣Бр╕Бр╣Йр╣Др╕Фр╣Йр╕Хр╣Йр╕нр╕Зр╣Ар╕Ыр╣Зр╕Щр╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕Зр╣Вр╕Юр╕к
      return res.status(403).json({ msg: "You are not authorized to edit this post" });

    const { position, description, skills } = req.body;

    post.position = position;
    post.description = description;
    post.skills = skills;
    post.updatedAt = Date.now();

    await post.save();
    res.status(200).json({ msg: "Post updated" });
  } catch (error) {
    res.status(500).json({ msg: "Server error" });
  }
});

// тЭМ API: р╕ер╕Ър╣Вр╕Юр╕кр╕Хр╣М
app.delete("/api/posts/:id", verifyToken, async (req, res) => {
  try {
    const post = await Post.findById(req.params.id);//р╣Ар╕Кр╣Зр╕Др╕зр╣Ир╕▓р╣Вр╕Юр╕кр╕Чр╕╡р╣Ир╕ер╕Ър╕бр╕╡р╕Ир╕гр╕┤р╕Зр╣Др╕лр╕б
    if (!post) return res.status(404).json({ msg: "Post not found" });

    if (String(post.companyId) !== String(req.userId)) {//р╕Др╕Щр╕Чр╕╡р╣Ир╕Ир╕░р╕ер╕Ър╣Др╕Фр╣Йр╕Хр╣Йр╕нр╕Зр╣Ар╕Ыр╣Зр╕Щр╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕Зр╣Вр╕Юр╕к
      return res.status(403).json({ msg: "You are not authorized to delete this post" });
    }

    await post.deleteOne();
    res.status(200).json({ msg: "Post deleted successfully" });
  } catch (error) {
    res.status(500).json({ msg: "Server error", error: error.message });
  }
});

// ЁЯУд API: Intern р╕кр╕бр╕▒р╕Др╕гр╕Эр╕╢р╕Бр╕Зр╕▓р╕Щ
app.post("/api/applications", verifyToken, async (req, res) => {
  try {
    if (req.role !== "intern")
      return res.status(403).json({ msg: "Only interns can apply" });

    const { postId, resume, coverLetter } = req.body;

    const application = new Application({
      postId,
      internId: req.userId,
      resume,
      coverLetter,
    });

    await application.save();
    res.status(201).json({ msg: "Application submitted successfully" });
  } catch (error) {
    res.status(500).json({ msg: "Server error", error: error.message });
  }
});

// 1я╕ПтГг API р╣Гр╕лр╣Й Intern р╕Фр╕╣р╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕▓р╕гр╕кр╕бр╕▒р╕Др╕гр╕Вр╕нр╕Зр╕Хр╕▒р╕зр╣Ар╕нр╕З
app.get("/api/intern/applications", verifyToken, async (req, res) => {
  try {
    if (req.role !== "intern") return res.status(403).json({ msg: "Only interns can view applications" });

    const applications = await Application.find({ internId: req.userId }).populate("postId", "position companyId");//р╕нр╣Ир╕▓р╕Щр╣Гр╕Ър╕кр╕бр╕▒р╕Др╕гр╕Вр╕нр╕Зр╕Хр╕▒р╕зр╣Ар╕нр╕З

    res.json(applications);
  } catch (error) {
    res.status(500).json({ msg: "Server error", error: error.message });
  }
});

// 1я╕ПтГг API р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Гр╕лр╣Йр╕Ър╕гр╕┤р╕йр╕▒р╕Чр╕Фр╕╣р╣Гр╕Ър╕кр╕бр╕▒р╕Др╕гр╕Чр╕╡р╣Ир╣Ар╕Вр╣Йр╕▓р╕бр╕▓р╣Гр╕Щр╣Вр╕Юр╕кр╕Хр╣Мр╕Вр╕нр╕Зр╕Хр╕▒р╕зр╣Ар╕нр╕З
app.get("/api/company/applications", verifyToken, async (req, res) => {
  try {
    if (req.role !== "company") {
      return res.status(403).json({ msg: "Only companies can view applications" });
    }

    // р╕Фр╕╡р╕Ър╕▒р╕Бр╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Ар╕лр╣Зр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е userId р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ
    console.log("User ID (company):", req.userId);

    // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Ър╕кр╕бр╕▒р╕Др╕гр╕Чр╕╡р╣Ир╣Ар╕Кр╕╖р╣Ир╕нр╕бр╣Вр╕вр╕Зр╕Бр╕▒р╕Ър╣Вр╕Юр╕кр╕Хр╣Мр╕Вр╕нр╕Зр╕Ър╕гр╕┤р╕йр╕▒р╕Ч
    const applications = await Application.find()
      .populate({
        path: "postId",
        match: { companyId: req.userId },  // р╕Бр╕гр╕нр╕Зр╣Гр╕лр╣Йр╣Бр╕Др╣Ир╣Вр╕Юр╕кр╕Хр╣Мр╕Чр╕╡р╣Ир╕Ър╕гр╕┤р╕йр╕▒р╕Чр╕кр╕гр╣Йр╕▓р╕З
        select: "position companyId",
      })
      .populate("internId", "email")  // р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Вр╕нр╕З Intern р╕Чр╕╡р╣Ир╕кр╕бр╕▒р╕Др╕г
      .exec();

    // р╕Бр╕гр╕нр╕Зр╣Гр╕Ър╕кр╕бр╕▒р╕Др╕гр╕Чр╕╡р╣Ир╕Ър╕гр╕┤р╕йр╕▒р╕Чр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕кр╕гр╣Йр╕▓р╕З (р╣Вр╕Юр╕кр╕Хр╣Мр╣Ар╕Ыр╣Зр╕Щ null)
    const filteredApplications = applications.filter(app => app.postId !== null);

    // р╕Фр╕╡р╕Ър╕▒р╕Бр╣Ар╕Юр╕╖р╣Ир╕нр╣Бр╕кр╕Фр╕Зр╣Гр╕Ър╕кр╕бр╕▒р╕Др╕гр╕Чр╕╡р╣Ир╕Фр╕╢р╕Зр╕бр╕▓
    console.log("Filtered Applications:", filteredApplications);

    res.json(filteredApplications);
  } catch (error) {
    console.log("Error:", error.message);  // р╕Фр╕╡р╕Ър╕▒р╕Бр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф
    res.status(500).json({ msg: "Server error", error: error.message });
  }
});


// 2я╕ПтГг API р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Гр╕лр╣Йр╕Ър╕гр╕┤р╕йр╕▒р╕Чр╕нр╕▒р╕Юр╣Ар╕Фр╕Хр╕кр╕Цр╕▓р╕Щр╕░р╕Вр╕нр╕Зр╣Гр╕Ър╕кр╕бр╕▒р╕Др╕г
app.put("/api/company/applications/:applicationId", verifyToken, async (req, res) => {
  try {
    if (req.role !== "company") return res.status(403).json({ msg: "Only companies can update applications" });

    const { status } = req.body;  // р╕гр╕▒р╕Ър╕кр╕Цр╕▓р╕Щр╕░р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕нр╕▒р╕Юр╣Ар╕Фр╕Х
    if (!["pending", "accepted", "rejected"].includes(status)) {
      return res.status(400).json({ msg: "Invalid status" });
    }

    const application = await Application.findById(req.params.applicationId);//р╣Гр╕Ър╕кр╕бр╕▒р╕Др╕гр╕бр╕╡р╕Ир╕гр╕┤р╕Зр╣Др╕лр╕б
    if (!application) return res.status(404).json({ msg: "Application not found" });

    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Вр╕Юр╕кр╕Хр╣Мр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щр╣Вр╕Юр╕кр╕Хр╣Мр╕Чр╕╡р╣Ир╕Ър╕гр╕┤р╕йр╕▒р╕Чр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╕гр╣Йр╕▓р╕Зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
    const post = await Post.findById(application.postId);
    if (post.companyId.toString() !== req.userId) {
      return res.status(403).json({ msg: "You are not authorized to update this application" });
    }

    // р╕нр╕▒р╕Юр╣Ар╕Фр╕Хр╕кр╕Цр╕▓р╕Щр╕░р╕Вр╕нр╕Зр╣Гр╕Ър╕кр╕бр╕▒р╕Др╕г
    application.status = status;
    await application.save();

    res.json({ msg: "Application status updated successfully" });
  } catch (error) {
    res.status(500).json({ msg: "Server error", error: error.message });
  }
});


app.listen(5000, () => {
  console.log("Server is running on port 5000");
});
















