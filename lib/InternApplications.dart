import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:timeago/timeago.dart' as timeago;
import 'package:url_launcher/url_launcher.dart';


class InternApplications extends StatefulWidget {
  @override
  _InternApplicationsState createState() => _InternApplicationsState();
}

class _InternApplicationsState extends State<InternApplications> {
  List<Application> applications = [];

  @override
  void initState() {
    super.initState();
    fetchApplications();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
  Future<void> fetchApplications() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString("token");

    print("TOKEN ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å SharedPreferences: $token"); // üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

    if (token == null) return;

    final response = await http.get(
      Uri.parse("http://localhost:5000/api/intern/applications"),
      headers: {"Authorization": "Bearer $token"},
    );

    if (response.statusCode == 200) {
      final List<dynamic> data = jsonDecode(response.body);
      setState(() {
        applications = data.map((e) => Application.fromJson(e)).toList();
      });
    } else {
      print("Failed to fetch applications. Response: ${response.body}");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'), backgroundColor: Colors.red),
      );
    }
  }

  String formatTime(String time) {
    try {
      DateTime dateTime = DateTime.parse(time);
      return timeago.format(dateTime);
    } catch (e) {
      return 'Invalid date';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
  backgroundColor: Color(0xFF110721), // --background
  appBar: AppBar(
    backgroundColor: Color(0xFF110721), // --background
    foregroundColor: Color(0xFFeae1f9), // --text
    title: Text(
      "Job Application Status",
      style: TextStyle(
        fontFamily: 'Candal', // ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Candal
      ),
    ),
  ),
  body: Padding(
    padding: const EdgeInsets.all(16.0),
    child: applications.isEmpty
        ? Center(
            child: Text(
              "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ",
              style: TextStyle(
                color: Color(0xFFae88e6), // --primary
                fontFamily: 'Mitr',
              ),
            ),
          )
        : ListView.builder(
            itemCount: applications.length,
            itemBuilder: (context, index) {
              final app = applications[index];
              return Card(
                elevation: 3,
                margin: EdgeInsets.symmetric(vertical: 8),
                color: Color(0xFF1f1330), // ‡∏î‡∏≤‡∏£‡πå‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                child: ListTile(
                  contentPadding: EdgeInsets.all(12),
                  title: Text(
                    "‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå: ${app.position}",
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Color(0xFFeae1f9), // --text
                      fontFamily: 'Mitr',
                    ),
                  ),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(height: 4),
                      Text(
                        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${app.status}",
                        style: TextStyle(
                          color: _getStatusColor(app.status), // ‡∏™‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                          fontFamily: 'Mitr',
                        ),
                      ),
                      SizedBox(height: 2),
                      Text(
                        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${formatTime(app.createdAt)}",
                        style: TextStyle(
                          fontSize: 12,
                          color: Color(0xFFae88e6), // --primary
                          fontFamily: 'Mitr',
                        ),
                      ),
                    ],
                  ),
                  trailing: Icon(Icons.arrow_forward, color: Color(0xFFae88e6)), // --primary
                  onTap: () => navigateToDetails(context, app),
                ),
              );
            },
          ),
  ),
);


  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ
  Color _getStatusColor(String status) {
    switch (status) {
      case "pending":
        return Colors.orange;
      case "accepted":
        return Colors.green;
      case "rejected":
        return Colors.red;
      default:
        return const Color(0xFFae88e6);  // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏£‡∏≤‡∏ô‡∏ã‡∏¥‡∏ä‡∏±‡∏ô)
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏£‡∏≤‡∏ô‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô)
void navigateToDetails(BuildContext context, Application app) {
  Navigator.push(
    context,
    PageRouteBuilder(
      pageBuilder: (context, animation, secondaryAnimation) {
        return ApplicationDetailsPage(app: app);
      },
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô (Slide)
        const begin = Offset(1.0, 0.0); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡∏ß‡∏≤
        const end = Offset.zero; // ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏∏‡∏î
        const curve = Curves.easeInOut; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß

        // ‡πÉ‡∏ä‡πâ Tween ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏≠‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•
        var slideTween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
        var slideAnimation = animation.drive(slideTween);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (Scale)
        var scaleTween = Tween(begin: 0.95, end: 1.0); // ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏à‡∏≤‡∏Å 95% ‡πÑ‡∏õ 100%
        var scaleAnimation = animation.drive(scaleTween);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏á (Fade)
        var fadeTween = Tween(begin: 0.0, end: 1.0); // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
        var fadeAnimation = animation.drive(fadeTween);

        // ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏°‡∏ó‡∏£‡∏≤‡∏ô‡∏ã‡∏¥‡∏ä‡∏±‡∏ô (‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô, ‡∏Ç‡∏¢‡∏≤‡∏¢, ‡∏à‡∏≤‡∏á)
        return FadeTransition(
          opacity: fadeAnimation,
          child: SlideTransition(
            position: slideAnimation,
            child: ScaleTransition(
              scale: scaleAnimation,
              child: child,
            ),
          ),
        );
      },
    ),
  );
}


}

class ApplicationDetailsPage extends StatelessWidget {
  final Application app;

  ApplicationDetailsPage({required this.app});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
  backgroundColor: Color(0xFF110721), // --background
  appBar: AppBar(
    backgroundColor: Color(0xFF110721), // --background
    foregroundColor: Color(0xFFeae1f9), // --text
    title: Text(
      "Job Application Details",
      style: TextStyle(
        fontFamily: 'Candal', // ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Candal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö heading
      ),
    ),
  ),
  body: Padding(
    padding: const EdgeInsets.all(16.0),
    child: ListView(
      children: [
        Text(
          "‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå: ${app.position}",
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Color(0xFFeae1f9), // --text
            fontFamily: 'Mitr',
          ),
        ),
        SizedBox(height: 16),
        Text(
          "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${app.status}",
          style: TextStyle(
            fontSize: 16,
            color: _getStatusColor(app.status), // ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            fontFamily: 'Mitr',
          ),
        ),
        SizedBox(height: 16),
        Text(
  "‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà:",
  style: TextStyle(
    fontWeight: FontWeight.bold,
    fontSize: 16,
    color: Color(0xFFae88e6), // --primary
    fontFamily: 'Mitr',
  ),
),
SizedBox(height: 4),
Container(
  padding: EdgeInsets.all(8),
  decoration: BoxDecoration(
    color: Color(0xFF1f1330), // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ò‡∏µ‡∏° --background
    borderRadius: BorderRadius.circular(8),
  ),
  child: InkWell(
    onTap: () {
      // ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà
      _launchURL(app.resume);
    },
    child: Text(
      app.resume, // ‡πÅ‡∏™‡∏î‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà
      style: TextStyle(
        fontSize: 14,
        color: Colors.blue, // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå
      ),
    ),
  ),
),
SizedBox(height: 16),



        Text(
          "‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô:",
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
            color: Color(0xFFae88e6), // --primary
            fontFamily: 'Mitr',
          ),
        ),
        SizedBox(height: 4),
        Container(
          padding: EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Color(0xFF1f1330), // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ò‡∏µ‡∏° --background
            borderRadius: BorderRadius.circular(8),
          ),
          child: Text(
            app.coverLetter,
            style: TextStyle(color: Color(0xFFeae1f9), fontFamily: 'Mitr'), // --text
          ),
        ),
        SizedBox(height: 16),
        Text(
          "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${timeago.format(DateTime.parse(app.createdAt))}",
          style: TextStyle(
            fontSize: 12,
            color: Color(0xFFae88e6), // --primary
            fontFamily: 'Mitr',
          ),
        ),
      ],
    ),
  ),
);



  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ
  Color _getStatusColor(String status) {
    switch (status) {
      case "pending":
        return Colors.orange;
      case "accepted":
        return Colors.green;
      case "rejected":
        return Colors.red;
      default:
        return Colors.black;  // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    }
  }

  void _launchURL(String url) async {
  final uri = Uri.parse(url);
  if (await canLaunchUrl(uri)) {
    await launchUrl(uri, mode: LaunchMode.externalApplication);
  } else {
    throw '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î URL ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ: $url';
  }
}
}

class Application {
  final String id;
  final String position;
  final String status;
  final String resume;
  final String coverLetter;
  final String createdAt;

  Application({
    required this.id,
    required this.position,
    required this.status,
    required this.resume,
    required this.coverLetter,
    required this.createdAt,
  });

  factory Application.fromJson(Map<String, dynamic> json) {
    return Application(
      id: json['_id'] ?? '',
      position: json['postId']['position'] ?? '',
      status: json['status'] ?? '',
      resume: json['resume'] ?? '',
      coverLetter: json['coverLetter'] ?? '',
      createdAt: json['appliedAt'] ?? '',
    );
  }
}














